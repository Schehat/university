TCP: Verbindungsorieniert, Fehlerbehandlung möglich, fehlerhafte Daten
und Reihenfolge erkennbar. Prozesse können mit Ports verbunden werden.
Verbindung zu Prozess herstellen möglich.

UDP: keine Fehlerbehandlung,  keine Reihenfolge, kein Verbindungsaufbau,
schneller

ipv4 4 u. 6 Unterschied: Grösse und Host u. Netztteil statisch geteilt.
Header ist konstant groß bei ipv6. Schreibweise mit Hexadezimal und Doppelpunkt.
Autokonfiguration auch möglich.

3)
a)
hostname => pool238pc04
ip-Adresse => 192.168.99.63 (private Adresse)
server: nc -l 9887
b)
client: nc <ip adresse von server> 9887
d)
wartet nach Enter (carriage return u. lindefeed), weil performance-schonender.
Sonst müsste man für jeden Buchstaben einen Segment schicken, mit ip-paket
und ethernet frame

4)
16 Byte = 2^128
Adressen = 10^6 
t = 10^-12 s
Adressen pro Sekunde = 10^18
Zeit = 2^128/10^18 ~= 3,4*10^38/10^18 = 3,4*10^20s => ca. 10^13 Jahre

5) seq wird nur um die Anzahl an Bytes in der Nutzlast erhöht. Ausnahme handshake
wird seq beim Sender um 1 und ack beim Empfänger um 1 erhöht
a)
aufbauende Rechner: 3 592 652 686 (Paket 34)
Zielrechner: 3 442 296 473 (Paket 39)
b)
komfort. Nicht im tcp Stanard. Relative Adresse tatsächliche Anzahl an gesendeten Bytes
c)
80
d)
Die 351 ist richtig, weil vorher das Paket Nr. 41 bei 62.138.116.25 angekommen
ist. In diesem Paket standen 350 Bytes, so dass der Spiegel-Server nun Byte Nr. 351 erwartet.
In allen drei Paketen steht dieselbe Quittierungsnummer, weil der Spiegelserver seine größere
Antwort in drei TCP-Segmente verteilt hat. Während diese Segmente versendet wurden sind
keine weiteren Pakete beim Spiegelserver eingetroffen, so dass nichts weiter empfangen wurde
und daher auch nichts weiter best¨atigt werden könnte.
+1 wegen handshake
e)
Die Sequenznummer ist immer noch 351, weil der Client keine weiteren Daten an
den Server geschickt hat. Die Quittierungsnummer ist 2897, denn in den drei Pakete 45, 46
und 47 hatte der Server 0 + 1448 + 1448 = 2896 Bytes an den Client geschickt. Der Client
bestätigt ihren erhalt und erwartet als nächste das Byte mit der Nummer 2897.
ack = 0 + 1448 + 1448 + 1 wegen handstake